<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Requests\Store{{ model }}Request;
use {{ rootNamespace }}Http\Requests\Update{{ model }}Request;
use {{ rootNamespace }}Models\{{ model }};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Schema;
use Inertia\Inertia;
use Laravel\Jetstream\Jetstream;

class {{ class }} extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        if (request()->wantsJson()) {
            return $this->get{{ model }}List();
        }
        return Inertia("{{ model }}s/index", []);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{ model }}Request $request)
    {
        $data = $request->validated();

        ${{ modelVariable }} = {{ model }}::create($data);
        return redirect()->route('{{ modelVariable }}s.index');
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        if (request()->wantsJson()) {
            return ${{ modelVariable }};
        }
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{ model }} ${{ modelVariable }})
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{ model }}Request $request, {{ model }} ${{ modelVariable }})
    {
        $data = $request->validated();

        $updated_{{ modelVariable }} = ${{ modelVariable }}->update($data);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->delete();
    }

    private function get{{ model }}List()
    {
        $columns = Schema::getColumnListing('{{ modelVariable }}s');
        $query = {{ model }}::query();

        if (request('sort_by_key'))
            $query->orderBy(request('sort_by_key'), request('sort_by_order') ?? "asc");

        foreach ($columns as $column) {
            if ($column == 'created_at' || $column == 'updated_at' || $column == 'id') continue;
            $query->orWhere($column, 'LIKE', '%' . request('search') . '%');
        }

        return $query->paginate(request('per_page') >= 0 ? request('per_page') : {{ model }}::count());
    }
}
